#include <sourcemod>
#include <sdktools>
#include <sdkhooks>
#include <cstrike>
#include <basecomm>

#pragma semicolon 1
#pragma newdecls required

#define ADMFLAG ADMFLAG_ROOT
#define ADMACCESS Admin_Root

#define PLUGIN_AUTHOR "Without#Name (Discord: WN4m3#1450)"
#define PLUGIN_VERSION "7.4.11"

////////////////////////////////////////////////////////////////////////////////////////////////////
//является ли игрок админом
public bool 
IsClientAdmin(
	int 			client)
{
	if(GetUserAdmin(client) == INVALID_ADMIN_ID)
		return false;
		
	return true;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//взять число типа int по модулю
public int 
Abs(
	int 			number)
{	
	return number*GetSign(number);
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//получить знак числа int типа
public int 
GetSign(
	int 			number)
{
	int 			res=0;

	if(number>=0)
		res = 1;
	else
		res = -1;
		
	return res;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//получить знак числа float типа
public int 
GetSignFloat(
	float 			number)
{
	int 			res=0;

	if(number>=0)
		res = 1;
	else
		res = -1;
		
	return res;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
public float 
NormalizeAngle(
	float 			Angle)
{
	if (Angle > 180) 
		Angle -= 360;
	else if(Angle < -180) 
		Angle += 360;
		
	return Angle;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
public bool 
IsValidClient(
	int 			client)
{
	if(client >= 1 && client <= MaxClients 
	&& IsValidEntity(client) 
	&& IsClientConnected(client) 
	&& IsClientInGame(client) 
	&& IsClientAuthorized(client) 
	&& !IsClientInKickQueue(client)
	&& !IsFakeClient(client))
		return true; 
		
	return false;
}
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//Структрура для обработки команд
enum struct SCmd {
	int 			argc;
	char 			argv[256];	

	int         	client;
	int         	target;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//Создание и поиск цели
  	bool 
	  Create(
		  int 		client, 
		  int 		argc)
  	{
		this.argc = argc + 1;
		this.client = client;
		
		if(!GetCmdArgString(this.argv,256))
			return false;

		return true;	
  	}
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//Получить аргумент как строку
	bool 
	GetArg(
		int 		iCount, 
		char[] 		buffer, 
		int 		sizeBuf)
	{
		if(iCount>=this.argc)
			return false;

		if(!GetCmdArg(iCount, buffer, sizeBuf))
			return false;

		return true;
	}  
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//Получить аргумент как целое число
	bool 
	GetArgHowInt(
		int 		iCount,
		int			&buffer)
	{
		char 		argv[256];

		if(iCount>=this.argc)
			return false;

		if(!GetCmdArg(iCount, argv, 256))
			return false;

		if(!StringToIntEx(argv, buffer, 10))
			return false;

		return true;
	} 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//Получить аргумент как число с точкой
	bool 
	GetArgHowFloat(
		int 		iCount,
		float		&buffer)
	{
		char 		argv[256];

		if(iCount>=this.argc)
			return false;

		if(!GetCmdArg(iCount, argv, 256))
			return false;

		if(!StringToFloatEx(argv, buffer))
			return false;

		return true;
	} 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//вернуть клиента
	int 
	GetClient()
	{
		return this.client;
	} 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//вернуть цель
	bool 
	GetTarget(
		int 		&buffer)
	{
		char bufferstr[64];

		this.GetArg(1, bufferstr, 64);

		this.target = FindTarget(this.client, bufferstr, true);

		if(!IsValidClient(this.target))
			return false;

		buffer = this.target;

		return true;
	} 
	////////////////////////////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//Получить всю строку 
	bool 
	GetAll(
		char[] 		buffer, 
		int 		sizeBuf)
	{
		GetCmdArgString(buffer, sizeBuf);
	
		ReplaceString(buffer, sizeBuf, "\"", "");	

		return true;
	}  
	////////////////////////////////////////////////////////////////////////////////////////////////////

	
}
////////////////////////////////////////////////////////////////////////////////////////////////////
